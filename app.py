import streamlit as st
# from streamlit_image_comparison import image_comparison

import cv2

from PIL import Image
import numpy as np

from io import BytesIO

import os
import shutil
import subprocess




# MARK: Page Config
st.set_page_config(
    page_title="OSZ Coursework",
    page_icon="üîç",
    layout="wide"
)


st.markdown(
    """
    <style>
    [data-testid="stSidebarHeader"] {
        display: none;
    }
    [data-testid="stSidebarUserContent"] {
        padding-top: 1.5rem;
    }
    [data-testid="stMainBlockContainer"] {
        padding-top: 3rem;
    }
    [data-testid="stAppDeployButton"] {
        display: none;
    }
    </style>
    """,
    unsafe_allow_html=True
)







# MARK: unsharp_mask()
@st.cache_data(show_spinner=False)
def unsharp_mask(image, sigma=1.0, strength=1.5):
    # Apply Gaussian blur
    blurred = cv2.GaussianBlur(image, (0, 0), sigma)
    # Subtract the blurred image from the original
    sharpened = cv2.addWeighted(image, 1.0 + strength, blurred, -strength, 0)
    return sharpened

# MARK: laplacian_filter()
@st.cache_data(show_spinner=False)
def laplacian_filter(image, sigma=1.0, strength=1.5, kernel_size=(5, 5)):
    # Apply Gaussian blur with specified kernel size
    blurred = cv2.GaussianBlur(image, kernel_size, sigma)
    # Subtract the blurred image from the original
    sharpened = cv2.addWeighted(image, 1.0 + strength, blurred, -strength, 0)
    return sharpened

# MARK: high_pass_filter()
@st.cache_data(show_spinner=False)
def high_pass_filter(image, sigma=1.0):
    # Apply Gaussian blur
    blurred = cv2.GaussianBlur(image, (0, 0), sigma)
    # Subtract the blurred image from the original
    high_pass = cv2.subtract(image, blurred)
    # Add the high-pass image back to the original
    sharpened = cv2.addWeighted(image, 1.0, high_pass, 1.0, 0)
    return sharpened









# MARK: apply_median_blur()
@st.cache_data(show_spinner=False)
def apply_median_blur(image, ksize):
    return cv2.medianBlur(image, ksize)


# MARK: apply_bilateral_filter()
@st.cache_data(show_spinner=False)
def apply_bilateral_filter(image, d, sigma_color, sigma_space):
    return cv2.bilateralFilter(image, d, sigma_color, sigma_space)


# MARK: apply_non_local_means()
@st.cache_data(show_spinner=False)
def apply_non_local_means(image, h, template_window_size, search_window_size):
    return cv2.fastNlMeansDenoisingColored(image, None, h, h, template_window_size, search_window_size)




# MARK: convert_jpg_to_png()
# @st.cache_data(show_spinner=False)
def convert_jpg_to_png(uploaded_image, input_folder="uploaded"):

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó uploaded, —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î
    os.makedirs(input_folder, exist_ok=True)
    
    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ–≥–æ —Ñ–∞–π–ª—É
    input_path = os.path.join(input_folder, uploaded_image.name)
    output_path = input_path.rsplit(".", 1)[0] + ".png"

    with open(input_path, "wb") as f:
        f.write(uploaded_image.getbuffer())

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –≤–∂–µ —ñ—Å–Ω—É—î —Ñ–∞–π–ª —É output_path
    if not os.path.exists(output_path):

        # jpeg2png_1.02_x64.exe jpeg2png.exe
        result = subprocess.run(["utils/jpeg2png_1.02_x64.exe", input_path], capture_output=True, text=True) 

        if result.returncode != 0:
            raise RuntimeError("Error converting JPEG to PNG: " + result.stderr)
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è PNG-–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–∞–∑–∞–¥ —É –ø—Ä–æ–≥—Ä–∞–º—É
    processed_image = Image.open(output_path).convert("RGB")
    return np.array(processed_image)







filter_functions = {
    "Median Blur": apply_median_blur,
    "Bilateral Filter": apply_bilateral_filter,
    "Non-Local Means Denoising": apply_non_local_means
}






if "detail_info" not in st.session_state:
    st.session_state.detail_info = True






# MARK: Sidebar
uploaded_image = st.sidebar.file_uploader("Upload an image", 
                                          type=["jpg", "jpeg"],
                                          label_visibility="collapsed")


# MARK: Crop Image
with st.sidebar.expander("Crop Image", expanded=False, icon="üîç"):
    crop_scale = st.slider("Select crop size (% of the original)", min_value=10, max_value=100, value=100, step=5)

    # –î–æ–¥–∞—Ç–∏ –≤–∏–±—ñ—Ä –ø–æ–∑–∏—Ü—ñ—ó –∫—Ä–æ–ø—É
    options = ["Center", "‚ÜñÔ∏è", "‚ÜóÔ∏è", "‚ÜôÔ∏è", "‚ÜòÔ∏è"]
    option_map = {
        "Center": ":material/zoom_in_map:",
        "Top-Left": ":material/north_west:",
        "Top-Right": ":material/north_east:",
        "Bottom-Left": ":material/south_west:",
        "Bottom-Right": ":material/south_east:",
    }
    crop_position = st.segmented_control(
        "Crop position", 
        options=option_map.keys(), 
        format_func=lambda option: option_map[option], 
        selection_mode="single", 
        default="Center",
    )


# MARK: Filtering
st.sidebar.subheader("Filtering", divider="gray")

jpg_to_png_toggle = st.sidebar.toggle(
    label="JPEG Smooth Decoding", 
    value=False, 
    help="Fill in the missing information to create the smoothest transitions in the image")


filtering_methods = st.sidebar.multiselect(
    label="Choose a filtering methods",
    options=list(filter_functions.keys()),
)



with st.sidebar.expander(f"{list(filter_functions.keys())[0]} Settings", 
                        icon="‚ìÇÔ∏è", 
                        expanded=list(filter_functions.keys())[0] in filtering_methods):

    ksize = st.slider("Select the blur level", 
                    min_value=1, 
                    max_value=9, 
                    value=3, 
                    step=2, 
                    disabled=list(filter_functions.keys())[0] not in filtering_methods,
                    help="–¶–µ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –≤–∏–∑–Ω–∞—á–∞—î —Ä–æ–∑–º—ñ—Ä –æ–±–ª–∞—Å—Ç—ñ, —è–∫–∞ –±—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏—Å—å –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –º–µ–¥—ñ–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø—ñ–∫—Å–µ–ª—è."
                        " –ö–æ–∂–µ–Ω –ø—ñ–∫—Å–µ–ª—å –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ –±—É–¥–µ –∑–∞–º—ñ–Ω–µ–Ω–∏–π –Ω–∞ –º–µ–¥—ñ–∞–Ω–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ –π–æ–≥–æ —Å—É—Å—ñ–¥–Ω—ñ—Ö –ø—ñ–∫—Å–µ–ª—ñ–≤ (–≤ –º–µ–∂–∞—Ö —Ä–æ–∑–º—ñ—Ä—É —è–¥—Ä–∞).")


    if st.session_state.detail_info:
        with st.popover(label="Median Blur info", icon="‚ÑπÔ∏è", use_container_width=True):
            st.text("–ú–µ–¥—ñ–∞–Ω–Ω–∏–π —Ñ—ñ–ª—å—Ç—Ä ‚Äî —Ü–µ –Ω–µ–ª–∏–Ω—ñ–π–Ω–∏–π —Ñ—ñ–ª—å—Ç—Ä, —è–∫–∏–π –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –∑–º–µ–Ω—à–µ–Ω–Ω—è —à—É–º—É –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ.\n\n" 
            "–î–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø—ñ–∫—Å–µ–ª—è –æ–±—á–∏—Å–ª—é—î—Ç—å—Å—è –º–µ–¥—ñ–∞–Ω–∞ —Å—É—Å—ñ–¥–Ω—ñ—Ö –ø—ñ–∫—Å–µ–ª—ñ–≤ —É –≤–∫–∞–∑–∞–Ω–æ–º—É –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–º—É –≤—ñ–∫–Ω—ñ, —ñ —Ü–∏–º –∑–Ω–∞—á–µ–Ω–Ω—è–º –∑–∞–º—ñ–Ω—é—î—Ç—å—Å—è –ø—ñ–∫—Å–µ–ª—å.\n\n" 
            "–¶–µ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –≤–∏–¥–∞–ª—è—î —à—É–º, –∑–±–µ—Ä—ñ–≥–∞—é—á–∏ –∫—Ä–∞—ó.")






with st.sidebar.expander(f"{list(filter_functions.keys())[1]} Settings", 
                        icon="üÖ±Ô∏è", 
                        expanded=list(filter_functions.keys())[1] in filtering_methods):

    d = st.slider("Diameter of pixel neighborhood", 
    min_value=1, 
    max_value=15, 
    value=9, 
    disabled=list(filter_functions.keys())[1] not in filtering_methods,
    help="–†–æ–∑–º—ñ—Ä —è–¥—Ä–∞. –†–æ–∑–º—ñ—Ä –æ–±–ª–∞—Å—Ç—ñ, —è–∫–∞ –±—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏—Å—å –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –≤–∞–≥–∏ –ø—ñ–∫—Å–µ–ª—è."
    " –¶–µ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –≤–∏–∑–Ω–∞—á–∞—î –¥—ñ–∞–º–µ—Ç—Ä –æ–±–ª–∞—Å—Ç—ñ, —è–∫–∞ –±—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏—Å—å –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –≤–∞–≥–∏ –ø—ñ–∫—Å–µ–ª—è.")

    sigma_color = st.slider("Sigma Color", 
    min_value=1, 
    max_value=500, 
    value=75, 
    disabled=list(filter_functions.keys())[1] not in filtering_methods,
    help="C—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è, —è–∫–µ –∫–æ–Ω—Ç—Ä–æ–ª—é—î –≤–ø–ª–∏–≤ –ø—ñ–∫—Å–µ–ª—ñ–≤ –∑ —Ä—ñ–∑–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏ —ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—ñ –∫–æ–ª—å–æ—Ä—É."
    "–¶–µ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –≤–∏–∑–Ω–∞—á–∞—î –≤–∞–≥—É, —è–∫–∞ –±—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏—Å—å –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –≤–∞–≥–∏ –ø—ñ–∫—Å–µ–ª—è –≤ –ø—Ä–æ—Å—Ç–æ—Ä—ñ –∫–æ–ª—å–æ—Ä—ñ–≤.")

    sigma_space = st.slider("Sigma Space", 
    min_value=1, 
    max_value=500, 
    value=75, 
    disabled=list(filter_functions.keys())[1] not in filtering_methods,
    help="C—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è, —è–∫–µ –∫–æ–Ω—Ç—Ä–æ–ª—é—î –≤–ø–ª–∏–≤ –¥–∞–ª–µ–∫–∏—Ö –ø—ñ–∫—Å–µ–ª—ñ–≤ –Ω–∞ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –≤–∞–≥–∏ –ø—ñ–∫—Å–µ–ª—è."
    "–¶–µ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –≤–∏–∑–Ω–∞—á–∞—î –≤–∞–≥—É, —è–∫–∞ –±—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏—Å—å –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –≤–∞–≥–∏ –ø—ñ–∫—Å–µ–ª—è –≤ –ø—Ä–æ—Å—Ç–æ—Ä—ñ –ø—ñ–∫—Å–µ–ª—ñ–≤.")


    if st.session_state.detail_info:
        with st.popover(label="Bilateral Filter info", icon="‚ÑπÔ∏è", use_container_width=True):
            st.text("–ë—ñ–ª–∞—Ç–µ—Ä–∞–ª—å–Ω–∏–π (–¥–≤–æ—Å—Ç–æ—Ä–æ–Ω–Ω—ñ–π) —Ñ—ñ–ª—å—Ç—Ä ‚Äî —Ü–µ –Ω–µ–ª—ñ–Ω—ñ–π–Ω–∏–π —Ñ—ñ–ª—å—Ç—Ä, —è–∫–∏–π –æ–¥–Ω–æ—á–∞—Å–Ω–æ –∑–≥–ª–∞–¥–∂—É—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —ñ –∑–±–µ—Ä—ñ–≥–∞—î —á—ñ—Ç–∫—ñ—Å—Ç—å –∫—Ä–∞—ó–≤.\n\n"
            "–í—ñ–Ω –≤—Ä–∞—Ö–æ–≤—É—î –Ω–µ –ª–∏—à–µ –≤—ñ–¥—Å—Ç–∞–Ω—å –º—ñ–∂ –ø—ñ–∫—Å–µ–ª—è–º–∏, –∞ –π —Ä—ñ–∑–Ω–∏—Ü—é —ó—Ö –∫–æ–ª—å–æ—Ä—ñ–≤, —â–æ–± —É–Ω–∏–∫–∞—Ç–∏ —Ä–æ–∑–º–∏—Ç—Ç—è –∫—Ä–∞—ó–≤.\n\n"
            "–¢–∞–∫–∏–π —Ñ—ñ–ª—å—Ç—Ä —ñ–¥–µ–∞–ª—å–Ω–æ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è –∑–º–µ–Ω—à–µ–Ω–Ω—è —à—É–º—É, –Ω–µ –≤—Ç—Ä–∞—á–∞—é—á–∏ –≤–∞–∂–ª–∏–≤–∏—Ö –¥–µ—Ç–∞–ª–µ–π.")




with st.sidebar.expander(f"{list(filter_functions.keys())[2]} Settings", 
                        icon=None, 
                        expanded=list(filter_functions.keys())[2] in filtering_methods):

    h = st.number_input(
        label="Filter strength (h)", 
        value=10, 
        step=1,
        help="–¶–µ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –≤–∏–∑–Ω–∞—á–∞—î —Å–∏–ª—É —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó. –ß–∏–º –≤–∏—â–µ –∑–Ω–∞—á–µ–Ω–Ω—è, —Ç–∏–º –±—ñ–ª—å—à–µ —à—É–º—É –±—É–¥–µ –≤–∏–¥–∞–ª–µ–Ω–æ, –∞–ª–µ –º–æ–∂–µ –≤–∏–Ω–∏–∫–Ω—É—Ç–∏ —Ä–∏–∑–∏–∫ –≤—Ç—Ä–∞—Ç–∏ –¥–µ—Ç–∞–ª–µ–π.")

    template_window_size = st.number_input(
        label="Template Window Size", 
        value=7, 
        step=1,
        help="–¶–µ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –≤–∏–∑–Ω–∞—á–∞—î —Ä–æ–∑–º—ñ—Ä –æ–±–ª–∞—Å—Ç—ñ, —è–∫–∞ –±—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏—Å—å –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è —Å—Ö–æ–∂–æ—Å—Ç—ñ –º—ñ–∂ –ø—ñ–∫—Å–µ–ª—è–º–∏.")
    
    search_window_size = st.number_input(
        label="Search Window Size", 
        value=21, 
        step=1,
        help="–¶–µ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –≤–∏–∑–Ω–∞—á–∞—î —Ä–æ–∑–º—ñ—Ä –æ–±–ª–∞—Å—Ç—ñ, —è–∫–∞ –±—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏—Å—å –¥–ª—è –ø–æ—à—É–∫—É —Å—Ö–æ–∂–∏—Ö –ø—ñ–∫—Å–µ–ª—ñ–≤.")


    if st.session_state.detail_info:
        with st.popover(label="NLM Denoising info", icon="‚ÑπÔ∏è", use_container_width=True):
            st.text("–§—É–Ω–∫—Ü—ñ—è fastNlMeansDenoisingColored ‚Äî —Ü–µ –º–µ—Ç–æ–¥ —É—Å—É–Ω–µ–Ω–Ω—è —à—É–º—É, –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π –¥–ª—è –∫–æ–ª—å–æ—Ä–æ–≤–∏—Ö –∑–æ–±—Ä–∞–∂–µ–Ω—å.\n\n"
            "–í–æ–Ω–∞ –∞–Ω–∞–ª—ñ–∑—É—î —Å—Ö–æ–∂—ñ—Å—Ç—å –ø—ñ–∫—Å–µ–ª—ñ–≤ —É –∑–∞–¥–∞–Ω–æ–º—É –≤—ñ–∫–Ω—ñ –Ω–∞–≤–∫–æ–ª–æ –∫–æ–∂–Ω–æ–≥–æ –ø—ñ–∫—Å–µ–ª—è —Ç–∞ —É—Å—É–≤–∞—î —à—É–º, –∑–±–µ—Ä—ñ–≥–∞—é—á–∏ —Ç–µ–∫—Å—Ç—É—Ä—É —ñ –¥–µ—Ç–∞–ª—ñ.\n\n"
            "–ú–µ—Ç–æ–¥ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –ø—Ä–∞—Ü—é—î –Ω–∞ –∫–æ–ª—å–æ—Ä–æ–≤–∏—Ö –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è—Ö, –∑–º–µ–Ω—à—É—é—á–∏ —à—É–º –±–µ–∑ –≤—Ç—Ä–∞—Ç–∏ —è–∫–æ—Å—Ç—ñ.")




# MARK: Sharpening
st.sidebar.subheader("Sharpening", divider="gray")

sharpen_method = []
sharpen_method = st.sidebar.pills(
    label="Sharpening method", 
    options=["Unsharp Masking", "Laplacian Filter", "High-Pass Filter"], 
    selection_mode="single",
    label_visibility="collapsed")

with st.sidebar.expander(
    label="Sharpening Settings", 
    expanded=sharpen_method is not None, 
    icon="üî™"):

    sharpen_sigma = st.slider(
        label="Sigma", 
        min_value=0.1, 
        max_value=10.0, 
        value=1.0, 
        step=0.1, 
        disabled=sharpen_method is None,
        help="–¶–µ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –≤–∏–∑–Ω–∞—á–∞—î —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –ì–∞—É—Å—Å—ñ–≤—Å—å–∫–æ–≥–æ —è–¥—Ä–∞, —è–∫–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è —Ä–æ–∑–º–∏—Ç—Ç—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–µ—Ä–µ–¥ –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è–º –≤—ñ–¥ –æ—Ä–∏–≥—ñ–Ω–∞–ª—É.")

    sharpen_strength = st.slider(
        label="Strength", 
        min_value=0.0, 
        max_value=10.0, 
        value=1.0, 
        step=0.1, 
        disabled=sharpen_method is None or "High-Pass Filter" in sharpen_method,
        help="–¶–µ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –≤–∏–∑–Ω–∞—á–∞—î —Å–∏–ª—É —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó. –ß–∏–º –≤–∏—â–µ –∑–Ω–∞—á–µ–Ω–Ω—è, —Ç–∏–º –±—ñ–ª—å—à–µ —Ä—ñ–∑–∫—ñ—Å—Ç—å –±—É–¥–µ –ø—ñ–¥—Å–∏–ª–µ–Ω–∞.")

    sharpen_kernel_size = st.slider(
        label="Kernel Size", 
        min_value=1, 
        max_value=15, 
        value=5, 
        step=2, 
        disabled=sharpen_method is None or "Laplacian Filter" not in sharpen_method,
        help="–¶–µ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –≤–∏–∑–Ω–∞—á–∞—î —Ä–æ–∑–º—ñ—Ä —è–¥—Ä–∞, —è–∫–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –¥—Ä—É–≥–æ—ó –ø–æ—Ö—ñ–¥–Ω–æ—ó –≤ –∫–æ–∂–Ω–æ–º—É –ø—ñ–∫—Å–µ–ª—ñ.")

    if st.session_state.detail_info:
        with st.popover(label="Sharpen Methods info", icon="‚ÑπÔ∏è", use_container_width=True):
            st.text("–ú–∞—Å–∫—É–≤–∞–Ω–Ω—è –∑–º–µ–Ω—à–µ–Ω–Ω—è —Ä—ñ–∑–∫–æ—Å—Ç—ñ ‚Äì —Ü–µ –∫–ª–∞—Å–∏—á–Ω–∞ —Ç–µ—Ö–Ω—ñ–∫–∞, —è–∫–∞ –ø–µ—Ä–µ–¥–±–∞—á–∞—î –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è —Ä–æ–∑–º–∏—Ç–æ—ó –≤–µ—Ä—Å—ñ—ó –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ –≤–∏—Ö—ñ–¥–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è. –¶–µ –ø–æ–∫—Ä–∞—â—É—î –∫—Ä–∞—ó —Ç–∞ –¥–µ—Ç–∞–ª—ñ, —â–æ –ø—Ä–∏–∑–≤–æ–¥–∏—Ç—å –¥–æ –±—ñ–ª—å—à —á—ñ—Ç–∫–æ–≥–æ –≤–∏–≥–ª—è–¥—É.\n\n"
            "–§—ñ–ª—å—Ç—Ä –õ–∞–ø–ª–∞—Å–∞ ‚Äî —Ü–µ –ø–æ—Ö—ñ–¥–Ω–∏–π —Ñ—ñ–ª—å—Ç—Ä –¥—Ä—É–≥–æ–≥–æ –ø–æ—Ä—è–¥–∫—É, —è–∫–∏–π –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –≤–∏—è–≤–ª–µ–Ω–Ω—è –∫—Ä–∞—ó–≤ –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ. –ó–∞—Å—Ç–æ—Å–æ–≤—É—é—á–∏ —Ñ—ñ–ª—å—Ç—Ä –õ–∞–ø–ª–∞—Å–∞, –º–∏ –º–æ–∂–µ–º–æ –≤–∏–¥—ñ–ª–∏—Ç–∏ –∫—Ä–∞—ó —Ç–∞ –ø–æ—Å–∏–ª–∏—Ç–∏ –∑–∞–≥–∞–ª—å–Ω—É —Ä—ñ–∑–∫—ñ—Å—Ç—å.\n\n"
            "–§—ñ–ª—å—Ç—Ä –≤–∏—Å–æ–∫–∏—Ö —á–∞—Å—Ç–æ—Ç —î —â–µ –æ–¥–Ω–∏–º –µ—Ñ–µ–∫—Ç–∏–≤–Ω–∏–º –º–µ—Ç–æ–¥–æ–º –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è —Ä—ñ–∑–∫–æ—Å—Ç—ñ –∑–æ–±—Ä–∞–∂–µ–Ω—å. –í—ñ–Ω –ø—Ä–∞—Ü—é—î, –¥–æ–∑–≤–æ–ª—è—é—á–∏ –≤–∏—Å–æ–∫–æ—á–∞—Å—Ç–æ—Ç–Ω–∏–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º (–∫—Ä–∞—è–º —ñ –¥–µ—Ç–∞–ª—è–º) –ø—Ä–æ—Ö–æ–¥–∏—Ç–∏, –æ–¥–Ω–æ—á–∞—Å–Ω–æ –æ—Å–ª–∞–±–ª—é—é—á–∏ –Ω–∏–∑—å–∫–æ—á–∞—Å—Ç–æ—Ç–Ω—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ (–≥–ª–∞–¥–∫—ñ –æ–±–ª–∞—Å—Ç—ñ)."
            )










st.sidebar.subheader("About image", divider="gray")


# MARK: –û–±—Ä–æ–±–∫–∞
if uploaded_image is None:
    st.header("‚¨ÖÔ∏è Upload an image to get started", divider=False)

    st.sidebar.write("Upload an image first.")
else:

    

    # –ß–∏—Ç–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —è–∫ PIL Image, –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –¥–æ —Ñ–æ—Ä–º–∞—Ç—É OpenCV
    image = Image.open(uploaded_image)

    width, height = image.size
    st.sidebar.write(f"Resolution: **`{width} x {height} px`**")

    original_size_kb = len(uploaded_image.getbuffer()) / 1024
    st.sidebar.write(f"Original image size: **`{round(original_size_kb, 2)} KB`**")

    image_np = np.array(image)


    processed_image = image_np  # –ü–æ—á–∞—Ç–∫–æ–≤–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, –Ω–∞ —è–∫–µ –Ω–∞–∫–ª–∞–¥–∞—é—Ç—å—Å—è —Ñ—ñ–ª—å—Ç—Ä–∏

    if jpg_to_png_toggle:
        processed_image = convert_jpg_to_png(uploaded_image)


    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∏–±—Ä–∞–Ω–æ –∫—ñ–ª—å–∫–∞ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ —ñ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —ó—Ö –ø–æ —á–µ—Ä–∑—ñ
    for method in filtering_methods:
        if method == list(filter_functions.keys())[0]:
            processed_image = apply_median_blur(processed_image, ksize)
        elif method == list(filter_functions.keys())[1]:
            processed_image = apply_bilateral_filter(processed_image, d, sigma_color, sigma_space)
        elif method == list(filter_functions.keys())[2]:
            processed_image = apply_non_local_means(processed_image, h, template_window_size, search_window_size)


    # –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è sharpening, —è–∫—â–æ –≤–∏–±—Ä–∞–Ω–æ
    if sharpen_method == "Unsharp Masking":
        processed_image = unsharp_mask(processed_image, sigma=sharpen_sigma, strength=sharpen_strength)
    elif sharpen_method == "Laplacian Filter":
        processed_image = laplacian_filter(processed_image, sigma=sharpen_sigma, strength=sharpen_strength, kernel_size=(sharpen_kernel_size, sharpen_kernel_size))
    elif sharpen_method == "High-Pass Filter":
        processed_image = high_pass_filter(processed_image, sigma=sharpen_sigma)



    result_image = Image.fromarray(processed_image)


    # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –∫—Ä–æ–ø—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤–∏–±—Ä–∞–Ω–æ–≥–æ –º–∞—Å—à—Ç–∞–±—É —Ç–∞ –ø–æ–∑–∏—Ü—ñ—ó
    width, height = image.size
    crop_width, crop_height = int(width * crop_scale / 100), int(height * crop_scale / 100)
    
    if crop_position == "Center":
        left = (width - crop_width) // 2
        upper = (height - crop_height) // 2
    elif crop_position == "Top-Left":
        left, upper = 0, 0
    elif crop_position == "Top-Right":
        left, upper = width - crop_width, 0
    elif crop_position == "Bottom-Left":
        left, upper = 0, height - crop_height
    elif crop_position == "Bottom-Right":
        left, upper = width - crop_width, height - crop_height
    
    right = left + crop_width
    lower = upper + crop_height
    crop_box = (left, upper, right, lower)

    # –ö—Ä–æ–ø –æ—Ä–∏–≥—ñ–Ω–∞–ª—É —Ç–∞ –æ–±—Ä–æ–±–ª–µ–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    original_crop = image.crop(crop_box)
    processed_crop = result_image.crop(crop_box)


    # MARK: –í–∏–≤—ñ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    col1, col2 = st.columns(2)

    with col1:
        # with st.container(border=True):
        st.subheader("Original Image:")
        # st.image(image, use_container_width=True)
        st.image(original_crop, use_container_width=True)

    with col2:
        # with st.container(border=True):
        st.subheader("Processed Image:")
        # st.image(sharpened_image, use_container_width=True)
        st.image(processed_crop, use_container_width=True)


        # MARK: –ö–Ω–æ–ø–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
        buffered = BytesIO()
        result_image.save(buffered, format="PNG")
        img_data = buffered.getvalue()

        processed_size_kb = len(img_data) / 1024
        size_difference = processed_size_kb / original_size_kb
        st.sidebar.write(f"Processed image size: **`{str(round(processed_size_kb, 2))} KB`** ") 
        st.sidebar.write(f"Processed image takes **`{round(size_difference, 1)}`** times more space")

        # –î–æ–¥–∞—Ç–∏ –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ–±—Ä–æ–±–ª–µ–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        st.download_button(
            label="Save Image",
            data=img_data,
            file_name="processed_image.png",
            mime="image/png",
            icon="‚¨áÔ∏è",
            use_container_width=True
        )





# MARK: Other Settings
st.sidebar.subheader("Other Settings", divider="gray")

if st.sidebar.button(
    label="Clear jpeg smooth decoding cache", 
    icon="üßπ"
    ): 

    shutil.rmtree("uploaded", ignore_errors=True)
    st.sidebar.write("Cache cleared successfully!")


if st.sidebar.button(f"Show Detail Info `{st.session_state.detail_info}`"):

    st.session_state.detail_info = not st.session_state.detail_info
    st.rerun()
    
