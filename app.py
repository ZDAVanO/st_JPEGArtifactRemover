import streamlit as st
from streamlit_image_comparison import image_comparison
import cv2
from PIL import Image
import numpy as np
from io import BytesIO
import os
import shutil
import subprocess
from skimage.restoration import denoise_tv_chambolle
# import zipfile

import time


# MARK: Page Config
st.set_page_config(
    page_title="JPEGArtifactRemover",
    page_icon="üîç",
    layout="wide"
)

st.markdown(
    """
    <style>

    # [data-testid="stSidebarHeader"] {
    #     display: none;
    # }

    # [data-testid="stSidebarUserContent"] {
    #     padding-top: 1.5rem;
    # }

    [data-testid="stMainBlockContainer"] {
        padding-top: 5rem;
    }
    
    [data-testid="stAppDeployButton"] {
        display: none;
    }

    # [data-testid="stDecoration"] {
    #     display: none;
    # }

    </style>
    """,
    unsafe_allow_html=True
)


# MARK: unsharp_mask()
@st.cache_data(show_spinner=False)
def unsharp_mask(image, sigma=1.0, strength=1.5):
    # Apply Gaussian blur
    blurred = cv2.GaussianBlur(image, (0, 0), sigma)
    # Subtract the blurred image from the original
    sharpened = cv2.addWeighted(image, 1.0 + strength, blurred, -strength, 0)
    return sharpened


# MARK: laplacian_filter()
@st.cache_data(show_spinner=False)
def laplacian_filter(image, sigma=1.0, strength=1.5, kernel_size=(5, 5)):
    # Apply Gaussian blur with specified kernel size
    blurred = cv2.GaussianBlur(image, kernel_size, sigma)
    # Subtract the blurred image from the original
    sharpened = cv2.addWeighted(image, 1.0 + strength, blurred, -strength, 0)
    return sharpened


# MARK: high_pass_filter()
@st.cache_data(show_spinner=False)
def high_pass_filter(image, sigma=1.0):
    # Apply Gaussian blur
    blurred = cv2.GaussianBlur(image, (0, 0), sigma)
    # Subtract the blurred image from the original
    high_pass = cv2.subtract(image, blurred)
    # Add the high-pass image back to the original
    sharpened = cv2.addWeighted(image, 1.0, high_pass, 1.0, 0)
    return sharpened


# MARK: apply_median_blur()
@st.cache_data(show_spinner=False)
def apply_median_blur(image, ksize):
    return cv2.medianBlur(image, ksize)


# MARK: apply_bilateral_filter()
@st.cache_data(show_spinner=False)
def apply_bilateral_filter(image, d, sigma_color, sigma_space):
    return cv2.bilateralFilter(image, d, sigma_color, sigma_space)


# MARK: apply_non_local_means()
@st.cache_data(show_spinner=False)
def apply_non_local_means(image, h, template_window_size, search_window_size):
    return cv2.fastNlMeansDenoisingColored(image, None, h, h, template_window_size, search_window_size)


# MARK: apply_smoothing_on_gradients()
@st.cache_data(show_spinner=False)
def apply_smoothing_on_gradients(img_rgb,
                                 sobel_ksize=3,             # 3
                                 gradient_threshold=15,     # 30
                                 blur_kernel_size=7):       # 7
    
    # rbat_col1, rbat_col2, rbat_col3, rbat_col4, rbat_col5 = st.columns(5)
    rbat_col2, rbat_col4, rbat_col5 = st.columns(3)

    with st.expander("Show apply_smoothing_on_gradients() function steps"):
        # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ –≤—ñ–¥—Ç—ñ–Ω–∫–∏ —Å—ñ—Ä–æ–≥–æ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —Ç–µ–∫—Å—Ç—É—Ä–∏ —Ç–∞ –∫–æ–ª—å–æ—Ä—É
        gray = cv2.cvtColor(img_rgb, cv2.COLOR_RGB2GRAY)

        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—é –ø–æ –≥—Ä–∞–¥—ñ—î–Ω—Ç–∞—Ö –¥–ª—è –≤–∏—è–≤–ª–µ–Ω–Ω—è –∑–æ–Ω –∑ –ø–ª–∞–≤–Ω–∏–º–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –æ–ø–µ—Ä–∞—Ç–æ—Ä Sobel –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –≥—Ä–∞–¥—ñ—î–Ω—Ç–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ –æ—Å—ñ X. 
        # –¶–µ –æ–∑–Ω–∞—á–∞—î, —â–æ –º–∏ –±—É–¥–µ–º–æ –≤–∏–º—ñ—Ä—é–≤–∞—Ç–∏ –∑–º—ñ–Ω–∏ —ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—ñ –ø—ñ–∫—Å–µ–ª—ñ–≤ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—ñ.
        grad_x = cv2.Sobel(gray, cv2.CV_64F, 1, 0, ksize=sobel_ksize)  # –ì—Ä–∞–¥—ñ—î–Ω—Ç –ø–æ –æ—Å—ñ X
        # –¶–µ –∞–Ω–∞–ª–æ–≥—ñ—á–Ω–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä Sobel, –∞–ª–µ –¥–ª—è –æ—Å—ñ Y, —â–æ –≤–∏–º—ñ—Ä—é—î –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–∏ —ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—ñ.
        grad_y = cv2.Sobel(gray, cv2.CV_64F, 0, 1, ksize=sobel_ksize)  # –ì—Ä–∞–¥—ñ—î–Ω—Ç –ø–æ –æ—Å—ñ Y
        # –û–±—á–∏—Å–ª—é—î –º–æ–¥—É–ª—å –≥—Ä–∞–¥—ñ—î–Ω—Ç—ñ–≤, —è–∫–∏–π —î –ø–æ—î–¥–Ω–∞–Ω–Ω—è–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∏—Ö —ñ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∏—Ö –≥—Ä–∞–¥—ñ—î–Ω—Ç—ñ–≤. 
        # –í—ñ–Ω –ø–æ–∫–∞–∑—É—î, –Ω–∞—Å–∫—ñ–ª—å–∫–∏ —Ä—ñ–∑–∫–æ –∑–º—ñ–Ω—é—î—Ç—å—Å—è —ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—å –ø—ñ–∫—Å–µ–ª—ñ–≤ —É –∫–æ–∂–Ω–æ–º—É –º—ñ—Å—Ü—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è. 
        # –í–µ–ª–∏—á–∏–Ω–∞ –≥—Ä–∞–¥—ñ—î–Ω—Ç–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –≤–∏—è–≤–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç—É—Ä—ñ–≤ —ñ –ø–µ—Ä–µ—Ö–æ–¥—ñ–≤ –∫–æ–ª—å–æ—Ä—É.
        grad_mag = cv2.magnitude(grad_x, grad_y)  # –ú–æ–¥—É–ª—å –≥—Ä–∞–¥—ñ—î–Ω—Ç—ñ–≤
        
        # –ú–∞—Å–∫–∞ –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –æ–±–ª–∞—Å—Ç–µ–π –∑ –º–∞–ª–∏–º –≥—Ä–∞–¥—ñ—î–Ω—Ç–æ–º (–¥–µ –Ω–µ–º–∞—î —Ä—ñ–∑–∫–∏—Ö –∑–º—ñ–Ω –∫–æ–ª—å–æ—Ä—É)
        # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥—Ä–∞–¥—ñ—î–Ω—Ç—ñ–≤ –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è —ñ –∫–æ–Ω–≤–µ—Ä—Ç—É—î —ó—Ö –≤ 8-–±—ñ—Ç–æ–≤–∏–π —Ñ–æ—Ä–º–∞—Ç (–≤—ñ–¥ 0 –¥–æ 255)
        grad_mag = cv2.convertScaleAbs(grad_mag)
        
        st.divider()
        # rbat_col1.image(grad_mag, caption="Gradient Magnitude", use_container_width=True)
        st.image(grad_mag, caption="Gradient Magnitude")

        # –°—Ç–≤–æ—Ä—é—î –±—ñ–Ω–∞—Ä–Ω—É –º–∞—Å–∫—É, –¥–µ –∑–Ω–∞—á–µ–Ω–Ω—è –ø—ñ–∫—Å–µ–ª—ñ–≤, —â–æ –º–∞—é—Ç—å –≥—Ä–∞–¥—ñ—î–Ω—Ç –≤–∏—â–µ –ø–æ—Ä–æ–≥—É 30, –æ—Ç—Ä–∏–º—É—é—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è 0 (—á–æ—Ä–Ω–∏–π), 
        # –∞ –ø—ñ–∫—Å–µ–ª—ñ –∑ –º–∞–ª–∏–º –≥—Ä–∞–¥—ñ—î–Ω—Ç–æ–º (—è–∫—ñ –º–∞—é—Ç—å –ø–ª–∞–≤–Ω—ñ –ø–µ—Ä–µ—Ö–æ–¥–∏) –æ—Ç—Ä–∏–º—É—é—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è 255 (–±—ñ–ª–∏–π)
        _, mask = cv2.threshold(grad_mag, gradient_threshold, 255, cv2.THRESH_BINARY_INV)  # –ß–∏–º –º–µ–Ω—à–∏–π –ø–æ—Ä—ñ–≥, —Ç–∏–º –±—ñ–ª—å—à–µ –∑–æ–Ω –∑ –ø–ª–∞–≤–Ω–∏–º–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏

        st.divider()
        rbat_col2.image(mask, caption="Mask for Smooth Areas", use_container_width=True)
        st.image(mask, caption="Mask for Smooth Areas (–ë—ñ–ª–∏–º —Ç–µ —â–æ —Ä–æ–∑–º–∏–≤–∞—î—Ç—å—Å—è)")
        
        # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –≤—ñ–¥—Å–æ—Ç–∫–∞ —Ä–æ–∑–º–∏—Ç–∏—Ö —Ç–∞ –Ω–µ—Ä–æ–∑–º–∏—Ç–∏—Ö –¥—ñ–ª—è–Ω–æ–∫
        total_pixels = mask.size  # –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—ñ–∫—Å–µ–ª—ñ–≤ (–ø–æ –≤—Å—å–æ–º—É –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—é)
        smooth_pixels = cv2.countNonZero(mask)  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –±—ñ–ª–∏—Ö –ø—ñ–∫—Å–µ–ª—ñ–≤ (—Ä–æ–∑–º–∏—Ç–∏—Ö)
        non_smooth_pixels = total_pixels - smooth_pixels  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å —á–æ—Ä–Ω–∏—Ö –ø—ñ–∫—Å–µ–ª—ñ–≤ (–Ω–µ—Ä–æ–∑–º–∏—Ç–∏—Ö)

        # –û–±—á–∏—Å–ª—é—î–º–æ –≤—ñ–¥—Å–æ—Ç–æ–∫
        smooth_percentage = (smooth_pixels / total_pixels) * 100
        non_smooth_percentage = (non_smooth_pixels / total_pixels) * 100

        blur_progress = smooth_percentage / 100

        st.progress(blur_progress)
        st.write(f"Percentage of smoothed area: {smooth_percentage:.2f}%")
        st.write(f"Percentage of non-smoothed area: {non_smooth_percentage:.2f}%")

        tuple_bks = (blur_kernel_size, blur_kernel_size)
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ–∑–º–∏—Ç—É –≤–µ—Ä—Å—ñ—é –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è –∑–æ–Ω –∑ –º–∞–ª–∏–º –≥—Ä–∞–¥—ñ—î–Ω—Ç–æ–º
        smoothed_img = cv2.GaussianBlur(img_rgb, tuple_bks, 0)

        st.divider()
        # rbat_col3.image(smoothed_img, caption="Smoothed Image", use_container_width=True)
        st.image(smoothed_img, caption="Smoothed Image")

        # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î –º–∞—Å–∫—É –¥–æ —Ä–æ–∑–º–∏—Ç–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è. –¶–µ –æ–∑–Ω–∞—á–∞—î, —â–æ –∑–≥–ª–∞–¥–∂—É–≤–∞–Ω–Ω—è –±—É–¥–µ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ –ª–∏—à–µ –¥–æ —Ç–∏—Ö –¥—ñ–ª—è–Ω–æ–∫, –¥–µ –º–∞—Å–∫–∞ –±—ñ–ª–∞ (–ø–ª–∞–≤–Ω—ñ –ø–µ—Ä–µ—Ö–æ–¥–∏)
        smoothed_img_masked = cv2.bitwise_and(smoothed_img, smoothed_img, mask=mask)

        st.divider()
        rbat_col4.image(smoothed_img_masked, caption="Smoothed Image with Mask", use_container_width=True)
        st.image(smoothed_img_masked, caption="Smoothed Image with Mask (–ß–∞—Å—Ç–∏–Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —è–∫–∞ —Ä–æ–∑–º–∏–≤–∞—î—Ç—å—Å—è)")

        # –ó–∞–ª–∏—à–∞—î–º–æ –Ω–µ–∑–º—ñ–Ω–Ω–∏–º–∏ –¥—ñ–ª—è–Ω–∫–∏ –∑ –≤–µ–ª–∏–∫–∏–º–∏ –≥—Ä–∞–¥—ñ—î–Ω—Ç–∞–º–∏
        non_smoothed_img = cv2.bitwise_and(img_rgb, img_rgb, mask=cv2.bitwise_not(mask))

        st.divider()
        rbat_col5.image(non_smoothed_img, caption="Non-Smoothed Image", use_container_width=True)
        st.image(non_smoothed_img, caption="Non-Smoothed Image (–ß–∞—Å—Ç–∏–Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —è–∫–∞ –Ω–µ –∑–º—ñ–Ω—é—î—Ç—å—Å—è)")

        # –û–±'—î–¥–Ω—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –ø–ª–∞–≤–Ω—ñ –∑–æ–Ω–∏ –∑ —Ä–æ–∑–º–∏—Ç—Ç—è–º, —ñ–Ω—à—ñ –∑ –±–µ–∑ –∑–º—ñ–Ω
        final_img = cv2.add(smoothed_img_masked, non_smoothed_img)

    return final_img 


# MARK: apply_denoise_tv_chambolle()
@st.cache_data(show_spinner=False)
def apply_denoise_tv_chambolle(image, weight=0.01):

    # –†–æ–∑–¥—ñ–ª–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–∞ –∫–∞–Ω–∞–ª–∏
    channels = cv2.split(image)

    # –í–∏–∫–æ–Ω–∞–Ω–Ω—è Total Variation Denoising –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–∞–Ω–∞–ª—É
    denoised_channels = [denoise_tv_chambolle(channel, weight=weight) for channel in channels]

    # –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞–Ω–∞–ª—ñ–≤ –¥–æ —Ñ–æ—Ä–º–∞—Ç—É uint8
    denoised_channels = [(channel * 255).astype(np.uint8) for channel in denoised_channels]

    # –û–±'—î–¥–Ω–∞–Ω–Ω—è –∫–∞–Ω–∞–ª—ñ–≤ –Ω–∞–∑–∞–¥ –≤ –∫–æ–ª—å–æ—Ä–æ–≤–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    tv_denoised_image = cv2.merge(denoised_channels)
    
    return tv_denoised_image


# MARK: convert_jpg_to_png()
# @st.cache_data(show_spinner=False)
def convert_jpg_to_png(uploaded_image, input_folder="uploaded"):

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó uploaded, —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î
    os.makedirs(input_folder, exist_ok=True)
    
    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ–≥–æ —Ñ–∞–π–ª—É
    input_path = os.path.join(input_folder, uploaded_image.name)
    output_path = input_path.rsplit(".", 1)[0] + ".png"

    with open(input_path, "wb") as f:
        f.write(uploaded_image.getbuffer())

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –≤–∂–µ —ñ—Å–Ω—É—î —Ñ–∞–π–ª —É output_path
    if not os.path.exists(output_path):
        # jpeg2png_1.02_x64.exe jpeg2png.exe
        result = subprocess.run(["utils/jpeg2png_1.02_x64.exe", input_path], capture_output=True, text=True) 

        if result.returncode != 0:
            raise RuntimeError("Error converting JPEG to PNG: " + result.stderr)
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è PNG-–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–∞–∑–∞–¥ —É –ø—Ä–æ–≥—Ä–∞–º—É
    processed_image = Image.open(output_path).convert("RGB")
    return np.array(processed_image)


# MARK: Filter Functions
filter_functions = {
    "Median Blur": apply_median_blur,
    "Bilateral Filter": apply_bilateral_filter,
    "Non-Local Means Denoising": apply_non_local_means,
    "Smoothing on Gradients": apply_smoothing_on_gradients,
    "Denoise TV Chambolle": apply_denoise_tv_chambolle,
}


if "detail_info" not in st.session_state:
    st.session_state.detail_info = True

if "image_comparison_toggle" not in st.session_state:
    st.session_state.image_comparison_toggle = False


# MARK: Sidebar
uploaded_images = st.sidebar.file_uploader("Upload an image", 
                                          type=["jpg", "jpeg"],
                                          label_visibility="collapsed",
                                          accept_multiple_files=True)

# MARK: Crop Image
with st.sidebar.expander("Crop Image", expanded=False, icon="üîç"):
    crop_scale = st.slider("Select crop size (% of the original)", min_value=10, max_value=100, value=100, step=5)

    # –î–æ–¥–∞—Ç–∏ –≤–∏–±—ñ—Ä –ø–æ–∑–∏—Ü—ñ—ó –∫—Ä–æ–ø—É
    options = ["Center", "‚ÜñÔ∏è", "‚ÜóÔ∏è", "‚ÜôÔ∏è", "‚ÜòÔ∏è"]
    option_map = {
        "Center": ":material/zoom_in_map:",
        "Top-Left": ":material/north_west:",
        "Top-Right": ":material/north_east:",
        "Bottom-Left": ":material/south_west:",
        "Bottom-Right": ":material/south_east:",
    }
    crop_position = st.segmented_control(
        "Crop position", 
        options=option_map.keys(), 
        format_func=lambda option: option_map[option], 
        selection_mode="single", 
        default="Center",
    )

# MARK: Filtering
st.sidebar.subheader("Filtering", divider="gray")

jpg_to_png_toggle = st.sidebar.toggle(
    label="JPEG Smooth Decoding", 
    value=False, 
    help="Fill in the missing information to create the smoothest transitions in the image")


filtering_methods = st.sidebar.multiselect(
    label="Choose a filtering methods",
    options=list(filter_functions.keys()),
)


with st.sidebar.expander(f"{list(filter_functions.keys())[0]} Settings", 
                        icon="‚ìÇÔ∏è", 
                        expanded=list(filter_functions.keys())[0] in filtering_methods):

    ksize = st.slider("Select the blur level", 
                    min_value=1, 
                    max_value=9, 
                    value=3, 
                    step=2, 
                    disabled=list(filter_functions.keys())[0] not in filtering_methods,
                    help="–¶–µ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –≤–∏–∑–Ω–∞—á–∞—î —Ä–æ–∑–º—ñ—Ä –æ–±–ª–∞—Å—Ç—ñ, —è–∫–∞ –±—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏—Å—å –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –º–µ–¥—ñ–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø—ñ–∫—Å–µ–ª—è."
                        " –ö–æ–∂–µ–Ω –ø—ñ–∫—Å–µ–ª—å –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ –±—É–¥–µ –∑–∞–º—ñ–Ω–µ–Ω–∏–π –Ω–∞ –º–µ–¥—ñ–∞–Ω–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ –π–æ–≥–æ —Å—É—Å—ñ–¥–Ω—ñ—Ö –ø—ñ–∫—Å–µ–ª—ñ–≤ (–≤ –º–µ–∂–∞—Ö —Ä–æ–∑–º—ñ—Ä—É —è–¥—Ä–∞).")

    if st.session_state.detail_info:
        with st.popover(label="Median Blur info", icon="‚ÑπÔ∏è", use_container_width=True):
            st.text("–ú–µ–¥—ñ–∞–Ω–Ω–∏–π —Ñ—ñ–ª—å—Ç—Ä ‚Äî —Ü–µ –Ω–µ–ª–∏–Ω—ñ–π–Ω–∏–π —Ñ—ñ–ª—å—Ç—Ä, —è–∫–∏–π –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –∑–º–µ–Ω—à–µ–Ω–Ω—è —à—É–º—É –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ.\n\n" 
            "–î–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø—ñ–∫—Å–µ–ª—è –æ–±—á–∏—Å–ª—é—î—Ç—å—Å—è –º–µ–¥—ñ–∞–Ω–∞ —Å—É—Å—ñ–¥–Ω—ñ—Ö –ø—ñ–∫—Å–µ–ª—ñ–≤ —É –≤–∫–∞–∑–∞–Ω–æ–º—É –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–º—É –≤—ñ–∫–Ω—ñ, —ñ —Ü–∏–º –∑–Ω–∞—á–µ–Ω–Ω—è–º –∑–∞–º—ñ–Ω—é—î—Ç—å—Å—è –ø—ñ–∫—Å–µ–ª—å.\n\n" 
            "–¶–µ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –≤–∏–¥–∞–ª—è—î —à—É–º, –∑–±–µ—Ä—ñ–≥–∞—é—á–∏ –∫—Ä–∞—ó.")



with st.sidebar.expander(f"{list(filter_functions.keys())[1]} Settings", 
                        icon="üÖ±Ô∏è", 
                        expanded=list(filter_functions.keys())[1] in filtering_methods):

    d = st.slider("Diameter of pixel neighborhood", 
    min_value=1, 
    max_value=15, 
    value=9, 
    disabled=list(filter_functions.keys())[1] not in filtering_methods,
    help="–†–æ–∑–º—ñ—Ä —è–¥—Ä–∞. –†–æ–∑–º—ñ—Ä –æ–±–ª–∞—Å—Ç—ñ, —è–∫–∞ –±—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏—Å—å –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –≤–∞–≥–∏ –ø—ñ–∫—Å–µ–ª—è."
    " –¶–µ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –≤–∏–∑–Ω–∞—á–∞—î –¥—ñ–∞–º–µ—Ç—Ä –æ–±–ª–∞—Å—Ç—ñ, —è–∫–∞ –±—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏—Å—å –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –≤–∞–≥–∏ –ø—ñ–∫—Å–µ–ª—è.")

    sigma_color = st.slider("Sigma Color", 
    min_value=1, 
    max_value=500, 
    value=75, 
    disabled=list(filter_functions.keys())[1] not in filtering_methods,
    help="C—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è, —è–∫–µ –∫–æ–Ω—Ç—Ä–æ–ª—é—î –≤–ø–ª–∏–≤ –ø—ñ–∫—Å–µ–ª—ñ–≤ –∑ —Ä—ñ–∑–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏ —ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—ñ –∫–æ–ª—å–æ—Ä—É."
    "–¶–µ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –≤–∏–∑–Ω–∞—á–∞—î –≤–∞–≥—É, —è–∫–∞ –±—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏—Å—å –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –≤–∞–≥–∏ –ø—ñ–∫—Å–µ–ª—è –≤ –ø—Ä–æ—Å—Ç–æ—Ä—ñ –∫–æ–ª—å–æ—Ä—ñ–≤.")

    sigma_space = st.slider("Sigma Space", 
    min_value=1, 
    max_value=500, 
    value=75, 
    disabled=list(filter_functions.keys())[1] not in filtering_methods,
    help="C—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è, —è–∫–µ –∫–æ–Ω—Ç—Ä–æ–ª—é—î –≤–ø–ª–∏–≤ –¥–∞–ª–µ–∫–∏—Ö –ø—ñ–∫—Å–µ–ª—ñ–≤ –Ω–∞ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –≤–∞–≥–∏ –ø—ñ–∫—Å–µ–ª—è."
    "–¶–µ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –≤–∏–∑–Ω–∞—á–∞—î –≤–∞–≥—É, —è–∫–∞ –±—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏—Å—å –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –≤–∞–≥–∏ –ø—ñ–∫—Å–µ–ª—è –≤ –ø—Ä–æ—Å—Ç–æ—Ä—ñ –ø—ñ–∫—Å–µ–ª—ñ–≤.")

    if st.session_state.detail_info:
        with st.popover(label="Bilateral Filter info", icon="‚ÑπÔ∏è", use_container_width=True):
            st.text("–ë—ñ–ª–∞—Ç–µ—Ä–∞–ª—å–Ω–∏–π (–¥–≤–æ—Å—Ç–æ—Ä–æ–Ω–Ω—ñ–π) —Ñ—ñ–ª—å—Ç—Ä ‚Äî —Ü–µ –Ω–µ–ª—ñ–Ω—ñ–π–Ω–∏–π —Ñ—ñ–ª—å—Ç—Ä, —è–∫–∏–π –æ–¥–Ω–æ—á–∞—Å–Ω–æ –∑–≥–ª–∞–¥–∂—É—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —ñ –∑–±–µ—Ä—ñ–≥–∞—î —á—ñ—Ç–∫—ñ—Å—Ç—å –∫—Ä–∞—ó–≤.\n\n"
            "–í—ñ–Ω –≤—Ä–∞—Ö–æ–≤—É—î –Ω–µ –ª–∏—à–µ –≤—ñ–¥—Å—Ç–∞–Ω—å –º—ñ–∂ –ø—ñ–∫—Å–µ–ª—è–º–∏, –∞ –π —Ä—ñ–∑–Ω–∏—Ü—é —ó—Ö –∫–æ–ª—å–æ—Ä—ñ–≤, —â–æ–± —É–Ω–∏–∫–∞—Ç–∏ —Ä–æ–∑–º–∏—Ç—Ç—è –∫—Ä–∞—ó–≤.\n\n"
            "–¢–∞–∫–∏–π —Ñ—ñ–ª—å—Ç—Ä —ñ–¥–µ–∞–ª—å–Ω–æ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è –∑–º–µ–Ω—à–µ–Ω–Ω—è —à—É–º—É, –Ω–µ –≤—Ç—Ä–∞—á–∞—é—á–∏ –≤–∞–∂–ª–∏–≤–∏—Ö –¥–µ—Ç–∞–ª–µ–π.")


with st.sidebar.expander(f"{list(filter_functions.keys())[2]} Settings", 
                        icon=None, 
                        expanded=list(filter_functions.keys())[2] in filtering_methods):

    h = st.number_input(
        label="Filter strength (h)", 
        value=10, 
        step=1,
        help="–¶–µ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –≤–∏–∑–Ω–∞—á–∞—î —Å–∏–ª—É —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó. –ß–∏–º –≤–∏—â–µ –∑–Ω–∞—á–µ–Ω–Ω—è, —Ç–∏–º –±—ñ–ª—å—à–µ —à—É–º—É –±—É–¥–µ –≤–∏–¥–∞–ª–µ–Ω–æ, –∞–ª–µ –º–æ–∂–µ –≤–∏–Ω–∏–∫–Ω—É—Ç–∏ —Ä–∏–∑–∏–∫ –≤—Ç—Ä–∞—Ç–∏ –¥–µ—Ç–∞–ª–µ–π.")

    template_window_size = st.number_input(
        label="Template Window Size", 
        value=7, 
        step=1,
        help="–¶–µ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –≤–∏–∑–Ω–∞—á–∞—î —Ä–æ–∑–º—ñ—Ä –æ–±–ª–∞—Å—Ç—ñ, —è–∫–∞ –±—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏—Å—å –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è —Å—Ö–æ–∂–æ—Å—Ç—ñ –º—ñ–∂ –ø—ñ–∫—Å–µ–ª—è–º–∏.")
    
    search_window_size = st.number_input(
        label="Search Window Size", 
        value=21, 
        step=1,
        help="–¶–µ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –≤–∏–∑–Ω–∞—á–∞—î —Ä–æ–∑–º—ñ—Ä –æ–±–ª–∞—Å—Ç—ñ, —è–∫–∞ –±—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏—Å—å –¥–ª—è –ø–æ—à—É–∫—É —Å—Ö–æ–∂–∏—Ö –ø—ñ–∫—Å–µ–ª—ñ–≤.")

    if st.session_state.detail_info:
        with st.popover(label="NLM Denoising info", icon="‚ÑπÔ∏è", use_container_width=True):
            st.text("–§—É–Ω–∫—Ü—ñ—è fastNlMeansDenoisingColored ‚Äî —Ü–µ –º–µ—Ç–æ–¥ —É—Å—É–Ω–µ–Ω–Ω—è —à—É–º—É, –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π –¥–ª—è –∫–æ–ª—å–æ—Ä–æ–≤–∏—Ö –∑–æ–±—Ä–∞–∂–µ–Ω—å.\n\n"
            "–í–æ–Ω–∞ –∞–Ω–∞–ª—ñ–∑—É—î —Å—Ö–æ–∂—ñ—Å—Ç—å –ø—ñ–∫—Å–µ–ª—ñ–≤ —É –∑–∞–¥–∞–Ω–æ–º—É –≤—ñ–∫–Ω—ñ –Ω–∞–≤–∫–æ–ª–æ –∫–æ–∂–Ω–æ–≥–æ –ø—ñ–∫—Å–µ–ª—è —Ç–∞ —É—Å—É–≤–∞—î —à—É–º, –∑–±–µ—Ä—ñ–≥–∞—é—á–∏ —Ç–µ–∫—Å—Ç—É—Ä—É —ñ –¥–µ—Ç–∞–ª—ñ.\n\n"
            "–ú–µ—Ç–æ–¥ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –ø—Ä–∞—Ü—é—î –Ω–∞ –∫–æ–ª—å–æ—Ä–æ–≤–∏—Ö –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è—Ö, –∑–º–µ–Ω—à—É—é—á–∏ —à—É–º –±–µ–∑ –≤—Ç—Ä–∞—Ç–∏ —è–∫–æ—Å—Ç—ñ.")


with st.sidebar.expander(f"{list(filter_functions.keys())[3]} Settings", 
                        icon=None, 
                        expanded=list(filter_functions.keys())[3] in filtering_methods):

    sobel_ksize = st.slider(
        label="Sobel Kernel Size", 
        min_value=1,
        max_value=31,
        value=3, 
        step=2,
        disabled=list(filter_functions.keys())[3] not in filtering_methods,
        help="–¶–µ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –≤–∏–∑–Ω–∞—á–∞—î —Ä–æ–∑–º—ñ—Ä —è–¥—Ä–∞, —è–∫–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –≥—Ä–∞–¥—ñ—î–Ω—Ç—ñ–≤ –ø–æ –æ—Å—ñ X —Ç–∞ Y.")
    
    gradient_threshold = st.slider(
        label="Gradient Threshold", 
        min_value=0,
        max_value=254,
        value=30, 
        step=1,
        disabled=list(filter_functions.keys())[3] not in filtering_methods,
        help="–¶–µ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –≤–∏–∑–Ω–∞—á–∞—î –ø–æ—Ä—ñ–≥, –∑–∞ —è–∫–∏–º –≤–∏–∑–Ω–∞—á–∞—î—Ç—å—Å—è —è–∫—É —á–∞—Å—Ç–∏–Ω—É –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–æ–∑–º–∏–≤–∞—Ç–∏.")
    
    blur_kernel_size = st.slider(
        label="Blur Kernel Size",
        min_value=1,
        max_value=99, 
        value=7, 
        step=2,
        disabled=list(filter_functions.keys())[3] not in filtering_methods,
        help="–¶–µ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –≤–∏–∑–Ω–∞—á–∞—î —Ä–æ–∑–º—ñ—Ä —è–¥—Ä–∞, —è–∫–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è —Ä–æ–∑–º–∏—Ç—Ç—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è –∑–æ–Ω –∑ –º–∞–ª–∏–º –≥—Ä–∞–¥—ñ—î–Ω—Ç–æ–º.")

    if st.session_state.detail_info:
        with st.popover(label="info", icon="‚ÑπÔ∏è", use_container_width=True):
            st.text("1")


with st.sidebar.expander(f"{list(filter_functions.keys())[4]} Settings", 
                        icon=None, 
                        expanded=list(filter_functions.keys())[4] in filtering_methods):

    weight = st.slider(
        label="Weight", 
        min_value=0.01, 
        max_value=0.15, 
        value=0.03, 
        step=0.01,
        disabled=list(filter_functions.keys())[4] not in filtering_methods,
        help="–¶–µ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –≤–∏–∑–Ω–∞—á–∞—î –≤–∞–≥—É, —è–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –≤–∞–≥–∏ –ø—ñ–∫—Å–µ–ª—è –≤ –ø—Ä–æ—Å—Ç–æ—Ä—ñ –∫–æ–ª—å–æ—Ä—ñ–≤.")

    # esp = st.number_input(
    #     label="esp", 
    #     value=0.0002, 
    #     step=0.0001,
    #     help="–ø–æ—Ä—ñ–≥ –¥–ª—è –∑—É–ø–∏–Ω–∫–∏ –∞–ª–≥–æ—Ä–∏—Ç–º—É. –ö–æ–ª–∏ –∑–º—ñ–Ω–∏ –º—ñ–∂ –¥–≤–æ–º–∞ —ñ—Ç–µ—Ä–∞—Ü—ñ—è–º–∏ —Å—Ç–∞—é—Ç—å –º–µ–Ω—à–∏–º–∏ –∑–∞ —Ü–µ –∑–Ω–∞—á–µ–Ω–Ω—è (—Ç–æ–±—Ç–æ, –∑–º—ñ–Ω–∏ —Å—Ç–∞—é—Ç—å –¥—É–∂–µ –º–∞–ª–∏–º–∏ —ñ –∞–ª–≥–æ—Ä–∏—Ç–º –±—ñ–ª—å—à–µ –Ω–µ –ø–æ–∫—Ä–∞—â—É—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç), —Ç–æ –∞–ª–≥–æ—Ä–∏—Ç–º –ø—Ä–∏–ø–∏–Ω—è—î—Ç—å—Å—è.")
    
    # max_num_iter = st.number_input( 
    #     label="max_num_iter", 
    #     value=200, 
    #     step=10,
    #     help="–¶–µ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –≤–∫–∞–∑—É—î –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —ñ—Ç–µ—Ä–∞—Ü—ñ–π, —è–∫—ñ –∞–ª–≥–æ—Ä–∏—Ç–º –º–æ–∂–µ –≤–∏–∫–æ–Ω–∞—Ç–∏ –ø—ñ–¥ —á–∞—Å –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó.")

    if st.session_state.detail_info:
        with st.popover(label="info", icon="‚ÑπÔ∏è", use_container_width=True):
            st.text("1")


# MARK: Sharpening
st.sidebar.subheader("Sharpening", divider="gray")

sharpen_method = []
sharpen_method = st.sidebar.pills(
    label="Sharpening method", 
    options=["Unsharp Masking", "Laplacian Filter", "High-Pass Filter"], 
    selection_mode="single",
    label_visibility="collapsed")

with st.sidebar.expander(
    label="Sharpening Settings", 
    expanded=sharpen_method is not None, 
    icon="üî™"):

    sharpen_sigma = st.slider(
        label="Sigma", 
        min_value=0.1, 
        max_value=10.0, 
        value=1.0, 
        step=0.1, 
        disabled=sharpen_method is None,
        help="–¶–µ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –≤–∏–∑–Ω–∞—á–∞—î —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –ì–∞—É—Å—Å—ñ–≤—Å—å–∫–æ–≥–æ —è–¥—Ä–∞, —è–∫–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è —Ä–æ–∑–º–∏—Ç—Ç—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–µ—Ä–µ–¥ –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è–º –≤—ñ–¥ –æ—Ä–∏–≥—ñ–Ω–∞–ª—É.")

    sharpen_strength = st.slider(
        label="Strength", 
        min_value=0.0, 
        max_value=10.0, 
        value=1.0, 
        step=0.1, 
        disabled=sharpen_method is None or "High-Pass Filter" in sharpen_method,
        help="–¶–µ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –≤–∏–∑–Ω–∞—á–∞—î —Å–∏–ª—É —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó. –ß–∏–º –≤–∏—â–µ –∑–Ω–∞—á–µ–Ω–Ω—è, —Ç–∏–º –±—ñ–ª—å—à–µ —Ä—ñ–∑–∫—ñ—Å—Ç—å –±—É–¥–µ –ø—ñ–¥—Å–∏–ª–µ–Ω–∞.")

    sharpen_kernel_size = st.slider(
        label="Kernel Size", 
        min_value=1, 
        max_value=15, 
        value=5, 
        step=2, 
        disabled=sharpen_method is None or "Laplacian Filter" not in sharpen_method,
        help="–¶–µ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –≤–∏–∑–Ω–∞—á–∞—î —Ä–æ–∑–º—ñ—Ä —è–¥—Ä–∞, —è–∫–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –¥—Ä—É–≥–æ—ó –ø–æ—Ö—ñ–¥–Ω–æ—ó –≤ –∫–æ–∂–Ω–æ–º—É –ø—ñ–∫—Å–µ–ª—ñ.")

    if st.session_state.detail_info:
        with st.popover(label="Sharpen Methods info", icon="‚ÑπÔ∏è", use_container_width=True):
            st.text("–ú–∞—Å–∫—É–≤–∞–Ω–Ω—è –∑–º–µ–Ω—à–µ–Ω–Ω—è —Ä—ñ–∑–∫–æ—Å—Ç—ñ ‚Äì —Ü–µ –∫–ª–∞—Å–∏—á–Ω–∞ —Ç–µ—Ö–Ω—ñ–∫–∞, —è–∫–∞ –ø–µ—Ä–µ–¥–±–∞—á–∞—î –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è —Ä–æ–∑–º–∏—Ç–æ—ó –≤–µ—Ä—Å—ñ—ó –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ –≤–∏—Ö—ñ–¥–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è. –¶–µ –ø–æ–∫—Ä–∞—â—É—î –∫—Ä–∞—ó —Ç–∞ –¥–µ—Ç–∞–ª—ñ, —â–æ –ø—Ä–∏–∑–≤–æ–¥–∏—Ç—å –¥–æ –±—ñ–ª—å—à —á—ñ—Ç–∫–æ–≥–æ –≤–∏–≥–ª—è–¥—É.\n\n"
            "–§—ñ–ª—å—Ç—Ä –õ–∞–ø–ª–∞—Å–∞ ‚Äî —Ü–µ –ø–æ—Ö—ñ–¥–Ω–∏–π —Ñ—ñ–ª—å—Ç—Ä –¥—Ä—É–≥–æ–≥–æ –ø–æ—Ä—è–¥–∫—É, —è–∫–∏–π –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –≤–∏—è–≤–ª–µ–Ω–Ω—è –∫—Ä–∞—ó–≤ –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ. –ó–∞—Å—Ç–æ—Å–æ–≤—É—é—á–∏ —Ñ—ñ–ª—å—Ç—Ä –õ–∞–ø–ª–∞—Å–∞, –º–∏ –º–æ–∂–µ–º–æ –≤–∏–¥—ñ–ª–∏—Ç–∏ –∫—Ä–∞—ó —Ç–∞ –ø–æ—Å–∏–ª–∏—Ç–∏ –∑–∞–≥–∞–ª—å–Ω—É —Ä—ñ–∑–∫—ñ—Å—Ç—å.\n\n"
            "–§—ñ–ª—å—Ç—Ä –≤–∏—Å–æ–∫–∏—Ö —á–∞—Å—Ç–æ—Ç —î —â–µ –æ–¥–Ω–∏–º –µ—Ñ–µ–∫—Ç–∏–≤–Ω–∏–º –º–µ—Ç–æ–¥–æ–º –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è —Ä—ñ–∑–∫–æ—Å—Ç—ñ –∑–æ–±—Ä–∞–∂–µ–Ω—å. –í—ñ–Ω –ø—Ä–∞—Ü—é—î, –¥–æ–∑–≤–æ–ª—è—é—á–∏ –≤–∏—Å–æ–∫–æ—á–∞—Å—Ç–æ—Ç–Ω–∏–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º (–∫—Ä–∞—è–º —ñ –¥–µ—Ç–∞–ª—è–º) –ø—Ä–æ—Ö–æ–¥–∏—Ç–∏, –æ–¥–Ω–æ—á–∞—Å–Ω–æ –æ—Å–ª–∞–±–ª—é—é—á–∏ –Ω–∏–∑—å–∫–æ—á–∞—Å—Ç–æ—Ç–Ω—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ (–≥–ª–∞–¥–∫—ñ –æ–±–ª–∞—Å—Ç—ñ)."
            )

# MARK: –û–±—Ä–æ–±–∫–∞
if not uploaded_images:
    st.header("‚¨ÖÔ∏è Upload an image to get started", divider=False)
else:
    # –ü–æ—á–∞—Ç–∏ –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è —á–∞—Å—É
    start_time = time.time()

    # zip_buffer = BytesIO()
    # with zipfile.ZipFile(zip_buffer, "w", zipfile.ZIP_DEFLATED) as zip_file:

    for uploaded_image in uploaded_images:
        
        file_name = uploaded_image.name
        processed_file_name = file_name.replace(".jpg", ".png")

        st.subheader(f"**`{file_name}`**", divider="gray")

        # –ß–∏—Ç–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —è–∫ PIL Image, –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –¥–æ —Ñ–æ—Ä–º–∞—Ç—É OpenCV
        image = Image.open(uploaded_image)
        
        width, height = image.size
        
        original_size_kb = len(uploaded_image.getbuffer()) / 1024
        
        image_np = np.array(image)

        processed_image = image_np  # –ü–æ—á–∞—Ç–∫–æ–≤–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, –Ω–∞ —è–∫–µ –Ω–∞–∫–ª–∞–¥–∞—é—Ç—å—Å—è —Ñ—ñ–ª—å—Ç—Ä–∏

        if jpg_to_png_toggle:
            processed_image = convert_jpg_to_png(uploaded_image)

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∏–±—Ä–∞–Ω–æ –∫—ñ–ª—å–∫–∞ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ —ñ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —ó—Ö –ø–æ —á–µ—Ä–∑—ñ
        for method in filtering_methods:
            if method == list(filter_functions.keys())[0]:
                processed_image = apply_median_blur(processed_image, ksize)
            elif method == list(filter_functions.keys())[1]:
                processed_image = apply_bilateral_filter(processed_image, d, sigma_color, sigma_space)
            elif method == list(filter_functions.keys())[2]:
                processed_image = apply_non_local_means(processed_image, h, template_window_size, search_window_size)
            elif method == list(filter_functions.keys())[3]:
                processed_image = apply_smoothing_on_gradients(processed_image, sobel_ksize, gradient_threshold, blur_kernel_size)
            elif method == list(filter_functions.keys())[4]:
                processed_image = apply_denoise_tv_chambolle(processed_image, weight=weight)

        # –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è sharpening, —è–∫—â–æ –≤–∏–±—Ä–∞–Ω–æ
        if sharpen_method == "Unsharp Masking":
            processed_image = unsharp_mask(processed_image, sigma=sharpen_sigma, strength=sharpen_strength)
        elif sharpen_method == "Laplacian Filter":
            processed_image = laplacian_filter(processed_image, sigma=sharpen_sigma, strength=sharpen_strength, kernel_size=(sharpen_kernel_size, sharpen_kernel_size))
        elif sharpen_method == "High-Pass Filter":
            processed_image = high_pass_filter(processed_image, sigma=sharpen_sigma)

        result_image = Image.fromarray(processed_image)

        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –∫—Ä–æ–ø—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤–∏–±—Ä–∞–Ω–æ–≥–æ –º–∞—Å—à—Ç–∞–±—É —Ç–∞ –ø–æ–∑–∏—Ü—ñ—ó
        width, height = image.size
        crop_width, crop_height = int(width * crop_scale / 100), int(height * crop_scale / 100)
        
        if crop_position == "Center":
            left = (width - crop_width) // 2
            upper = (height - crop_height) // 2
        elif crop_position == "Top-Left":
            left, upper = 0, 0
        elif crop_position == "Top-Right":
            left, upper = width - crop_width, 0
        elif crop_position == "Bottom-Left":
            left, upper = 0, height - crop_height
        elif crop_position == "Bottom-Right":
            left, upper = width - crop_width, height - crop_height
        
        right = left + crop_width
        lower = upper + crop_height
        crop_box = (left, upper, right, lower)

        # –ö—Ä–æ–ø –æ—Ä–∏–≥—ñ–Ω–∞–ª—É —Ç–∞ –æ–±—Ä–æ–±–ª–µ–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        original_crop = image.crop(crop_box)
        processed_crop = result_image.crop(crop_box)

        buffered = BytesIO()
        result_image.save(buffered, format="PNG")
        img_data = buffered.getvalue()

        processed_size_kb = len(img_data) / 1024
        size_difference = processed_size_kb / original_size_kb

        # –î–æ–¥–∞—î–º–æ –¥–æ –∞—Ä—Ö—ñ–≤—É
        # zip_file.writestr(processed_file_name, img_data)

        if st.session_state.image_comparison_toggle:
            image_comparison(original_crop, processed_crop, "Original", "Processed")

        # MARK: –í–∏–≤—ñ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        col1, col2 = st.columns(2)

        if not st.session_state.image_comparison_toggle:
            col1.subheader(f"Original Image:")
            col1.image(original_crop, use_container_width=True)

        with col1.popover(label=f"Details (About)", icon="‚ÑπÔ∏è", use_container_width=True):
            st.write(f"Resolution: **`{width} x {height} px`**")
            st.write(f"Original image size: **`{round(original_size_kb, 2)} KB`**")
            st.write(f"Processed image size: **`{str(round(processed_size_kb, 2))} KB`** ") 
            st.write(f"Processed image takes **`{round(size_difference, 1)}`** times more space")

        if not st.session_state.image_comparison_toggle:
            col2.subheader("Processed Image:")
            col2.image(processed_crop, use_container_width=True)

        # MARK: –ö–Ω–æ–ø–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
        col2.download_button(
            label=f"Save Image **`{processed_file_name}`**",
            data=img_data,
            file_name=processed_file_name,
            mime="image/png",
            icon="‚¨áÔ∏è",
            use_container_width=True,
            key=processed_file_name
        )
        
    # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è —á–∞—Å—É
    end_time = time.time()
    execution_time = end_time - start_time
    st.sidebar.subheader("Execution Time", divider="gray")
    st.sidebar.write(f"Execution time: **`{execution_time:.2f} seconds`**")

    # zip_buffer.seek(0)  # –ü–µ—Ä–µ–º—ñ—â—É—î–º–æ –≤–∫–∞–∑—ñ–≤–Ω–∏–∫ –Ω–∞ –ø–æ—á–∞—Ç–æ–∫
    # # –ö–Ω–æ–ø–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞—Ä—Ö—ñ–≤—É
    # st.sidebar.download_button(
    #     label="Download All Images as ZIP",
    #     data=zip_buffer,
    #     file_name="processed_images.zip",
    #     mime="application/zip",
    #     icon="‚¨áÔ∏è"
    # )


# MARK: Other Settings
st.sidebar.subheader("Other Settings", divider="gray")

if st.sidebar.button(
    label="Clear jpeg smooth decoding cache", 
    icon="üßπ" ): 
    shutil.rmtree("uploaded", ignore_errors=True)
    st.sidebar.write("Cache cleared successfully!")

if st.sidebar.button(f"Show Detail Info `{st.session_state.detail_info}`"):
    st.session_state.detail_info = not st.session_state.detail_info
    st.rerun()

if st.sidebar.button(f"Toggle Image Comparison `{st.session_state.image_comparison_toggle}`"):
    st.session_state.image_comparison_toggle = not st.session_state.image_comparison_toggle
    st.rerun()
        
